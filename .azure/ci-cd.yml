variables:
  python.version: "3.11"

  feed.project: GRP - Fundamentals Modeling
  feed.endpoint: feed_fund
  use_conda: False

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - setup_poetry_temp.yml
    - setup_conda_temp.yml

resources:
 repositories:
  - repository: pythonLibraryTemplate
    type: git
    name: "GRP - Fundamentals Modeling/app-library-template"

stages:

- stage: inspect
  pool:
    vmImage: ubuntu-latest

  jobs:

  - job: dependabot
    steps:

    - checkout: self
      persistCredentials: true

    #- task: dependabot@1
    #  failOnException: true
    #  azureDevOpsAccessToken: $(System.AccessToken)

- stage: integrate
  pool:
    vmImage: ubuntu-latest

  jobs:

  - job: lint
    steps: 

    - checkout: self
      persistCredentials: true
    - checkout: pythonLibraryTemplate
      persistCredentials: true

    - ${{ if eq(variables.use_conda, true) }}:
      - template: setup_conda_temp.yml
        parameters:
            conda_env_dir: $(Pipeline.Workspace)/{{ cookiecutter.repo_name }}/.venv
            conda_lock_file: '{{ cookiecutter.repo_name }}/conda-lock.yml'
      
    - ${{ if eq(variables.use_conda, false) }}:
      - template: setup_poetry_temp.yml
        parameters:
            poetry_lock_file: '{{ cookiecutter.repo_name }}/poetry.lock'

    - script: |
        cd interop
        python .azure/edit_cruft.py

      displayName: Update cruft config file

    - script: |
        cd interop
        mds-dev lint
      displayName: Enforce linting

  - job: test
    steps:

    - checkout: self

    - ${{ if eq(variables.use_conda, true) }}:
      - template: setup_conda_temp.yml
        parameters:
            conda_env_dir: $(Pipeline.Workspace)/{{ cookiecutter.repo_name }}/.venv
            conda_lock_file: 'conda-lock.yml'
      
    - ${{ if eq(variables.use_conda, false) }}:
      - template: setup_poetry_temp.yml
        parameters:
            poetry_lock_file: 'poetry.lock'

    - script: |
         mds-dev test
      displayName: Run tests

    - script: |
         is_release=$(python .azure/detect_release.py | awk 'END{print}')
         echo '##vso[task.setvariable variable=is_release;isOutput=true]tag_msg'
         echo "is_release = " $is_release
      displayName: detect_release

    - script: |
         is_release=$(python .azure/detect_release.py | awk 'END{print}')
         echo '##vso[task.setvariable variable=is_release;isOutput=true]$is_release'
         mkdir -p $(Pipeline.Workspace)/variables
         echo "$is_release" > $(Pipeline.Workspace)/variables/is_release
      displayName: detect_release

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Cobertura Coverage Report'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

    # Publish the folder as pipeline artifact
    - publish: $(Pipeline.Workspace)/variables
      artifact: VariablesArtifact

- stage: release
  dependsOn: integrate
  pool:
    vmImage: ubuntu-latest
  jobs:

  - job: check
    steps:

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "VariablesArtifact"
        path: $(Pipeline.Workspace)/VariablesArtifact

    - script: |
        is_release=$(cat $(Pipeline.Workspace)/VariablesArtifact/is_release)
        echo "is_release = $is_release"
        echo "##vso[task.setvariable variable=is_release;isOutput=true]$is_release"
      name: variablesStep

  - job: publish
    dependsOn: check
    condition: eq(dependencies.check.outputs['variablesStep.is_release'], 'True')
    steps:

    - ${{ if eq(variables.use_conda, true) }}:
      - template: setup_conda_temp.yml
        parameters:
            conda_env_dir: $(Pipeline.Workspace)/{{ cookiecutter.repo_name }}/.venv
            conda_lock_file: 'conda-lock.yml'
      
    - ${{ if eq(variables.use_conda, false) }}:
      - template: setup_poetry_temp.yml
        parameters:
            poetry_lock_file: 'poetry.lock'

    - script: |
        poetry build
      displayName: Install poetry and build wheel

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.Repository.LocalPath)/dist'
        ArtifactName: 'drop'

- stage: deploy
  dependsOn: release
  condition: succeeded('release')
  pool:
    vmImage: ubuntu-latest
  jobs:

  - job: check
    steps:
        
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "VariablesArtifact"
        path: $(Pipeline.Workspace)/VariablesArtifact
        
    - script: |
        is_release=$(cat $(Pipeline.Workspace)/VariablesArtifact/is_release)
        echo "is_release = $is_release"
        echo "##vso[task.setvariable variable=is_release;isOutput=true]$is_release"
      name: variablesStep

  - deployment: 'deploy_wheel'
    displayName: 'upload pkg'
    environment: 'repo-dev'
    dependsOn: check
    condition: eq(dependencies.check.outputs['variablesStep.is_release'], 'True')
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download Pipeline Artifact
            inputs:
              buildType: current
              artifactName: drop
              buildVersionToDownload: latest
              targetPath: $(Pipeline.Workspace)
 
          - task: TwineAuthenticate@1
            displayName: Twine Authenticate
            inputs:
              artifactFeed: $(feed.endpoint)

          - script: |
              ls $(Pipeline.Workspace) -ltr
              python -m pip install twine
              python -m twine upload --verbose -r "$(feed.endpoint)" --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/*.whl
            displayName: Install pip and upload wheel via twine

