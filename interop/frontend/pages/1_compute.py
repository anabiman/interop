import inspect
import textwrap

import st_ray
import pandas
import plot
import ray
import streamlit
from meta import DEV_EMAIL, DEV_NAME

# from stpyvista import stpyvista
# from visualize import stpv_usage_example

MAX_CPU = 10


def compute_button():
    streamlit.session_state.compute = True


def main():
    streamlit.title("MDS Demo App")
    #    stpyvista(stpv_usage_example())

    if "compute" not in streamlit.session_state:
        streamlit.session_state.compute = False

    streamlit.header("Computation Setup", divider="blue")

    with streamlit.sidebar:
        streamlit.header("Compute Config")
        compute_options = ("local", "kitt")
        selected_compute = streamlit.selectbox(
            label="Backend compute",
            options=compute_options,
        )

        if selected_compute == "local":
            available_resources = st_ray.get_resources()
            cpu_count = [1, int(available_resources.get("CPU", MAX_CPU))]
            gpu_count = [available_resources.get("GPU")]
        else:
            cpu_count = [1, 16, 32]
            gpu_count = [1, 2]

        selected_cpu = streamlit.selectbox(
            label="CPU core count",
            options=cpu_count,
        )

        selected_gpu = streamlit.selectbox(
            label="GPU device count",
            options=gpu_count,
        )

        if selected_compute == "local":
            streamlit.caption(""":orange[Run computation on your local machine.]""")
        if selected_compute == "kitt":
            streamlit.caption(""":orange[Run computation on remote "kitt" cluster.]""")

    # User input param table
    input_df = pandas.DataFrame(
        [
            {
                "Temperature (K)": 300,
                "Pressure (bat)": 1,
                "Spacing (cm)": 0.1,
                "Time (s)": 1.0,
            }
        ]
    )

    # Input your data using data editor
    table_data = streamlit.data_editor(input_df, num_rows="dynamic", hide_index=True)

    # Handle user input
    compute_btn = streamlit.button("Compute", on_click=compute_button)

    if streamlit.session_state.compute:
        table_data.reset_index(drop=True, inplace=True)
        table_data = table_data.dropna(axis=0)
        input_data = table_data.to_dict()
        nsims = len(table_data.index)

        if nsims >= 3:
            streamlit.error("Only up to 2 concurrent runs is supported!", icon="ðŸš¨")
            streamlit.session_state.compute = False
        else:
            streamlit.write(f"Submitted {nsims} job(s)!")

    streamlit.header("Results", divider="blue")
    if streamlit.session_state.compute:
        plot.demo_plot(nplots=nsims)


if __name__ == "__main__":
    streamlit.set_page_config(
        page_title="Streamlit MDS App", page_icon=":chart_with_upwards_trend:"
    )
    main()
    with streamlit.sidebar:
        streamlit.markdown("---")
        streamlit.markdown(
            f'<h6>Made in &nbsp<img src="https://streamlit.io/images/brand/streamlit-mark-color.png" alt="Streamlit logo" height="16">&nbsp by <a href=mailto:{DEV_EMAIL} style="color:#BE541D;">@{DEV_NAME}</a></h6>',
            unsafe_allow_html=True,
        )
        streamlit.markdown(
            f'<h6>Generated by the MDS <a href="https://dev.azure.com/dcimds/MDS_Demo_Platform/_git/app-library-template" style="color:#BE541D;">app-library-template</a></h6>',
            unsafe_allow_html=True,
        )
